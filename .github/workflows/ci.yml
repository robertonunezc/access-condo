name: Deploy to Server

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install SSH Client
      run: sudo apt-get install -y openssh-client

    - name: Docker login
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker image
      run: docker build -t robe/development:condo-app .
    
    - name: Push Docker image
      run: docker push robe/development:condo-app
    
    - name: Add SSH key
      run: |
        echo "${{ secrets.AWS_EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem
        eval $(ssh-agent -s)
        ssh-add key.pem
      
    - name: Deploy to Server
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@ec2-54-226-30-217.compute-1.amazonaws.com <<EOF
          set -e
          docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
          docker pull robe/development:condo-app
          if docker ps -a | grep -q condo-app; then
              echo "Stopping and removing existing container..."
              docker stop condo-app || true
              sleep 5
              docker rm condo-app || true
              sleep 5
          fi
          docker run -d --name condo-app \
            -e DATABASE_USER=${{ secrets.DATABASE_USER }} \
            -e DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            -e DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
            -e DATABASE_HOST=${{ secrets.DATABASE_HOST }} \
            -e DATABASE_PORT=${{ secrets.DATABASE_PORT }} \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_REGION=\us-east-1 \
            -e AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }} \
            -e WEB_HOST=${{ secrets.WEB_HOST }} \
            -e MAILGUN_API_KEY= ${{ secrets.MAILGUN_API_KEY }} \
            -e MAILGUN_DOMAIN=${{ secrets.MAILGUN_DOMAIN }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }}\
            -e NODE_ENV=production \
            -p 80:80 \
            robe/development:condo-app
          # Display running container
          echo "List Running container:"
          docker ps -a
          
          # Display logs
          echo "Displaying logs:"
          docker logs condo-app

          # Wait for the container to be ready, retry up to 3 times
          retries=3
          count=0
          until docker exec condo-app npx knex migrate:latest --knexfile db/knex.ts || [ $count -eq $retries ]; do
            echo "Waiting for container to start... ($count/$retries)"
            count=$((count+1))
            sleep 5
          done

          if [ $count -eq $retries ]; then
            echo "Container did not start in time, aborting."
            exit 1
          fi
        EOF
